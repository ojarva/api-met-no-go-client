// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ForecastTimePeriod Weather parameters valid for a specified time period.
//
// swagger:model ForecastTimePeriod
type ForecastTimePeriod struct {

	// Maximum air temperature in period
	// Example: 17.1
	AirTemperatureMax float64 `json:"air_temperature_max,omitempty"`

	// Minimum air temperature in period
	// Example: 11.1
	AirTemperatureMin float64 `json:"air_temperature_min,omitempty"`

	// Best estimate for amount of precipitation for this period
	// Example: 1.71
	PrecipitationAmount float64 `json:"precipitation_amount,omitempty"`

	// Maximum amount of precipitation for this period
	// Example: 4.32
	PrecipitationAmountMax float64 `json:"precipitation_amount_max,omitempty"`

	// Minimum amount of precipitation for this period
	// Example: 4.32
	PrecipitationAmountMin float64 `json:"precipitation_amount_min,omitempty"`

	// Probability of any precipitation coming for this period
	// Example: 37
	ProbabilityOfPrecipitation float64 `json:"probability_of_precipitation,omitempty"`

	// Probability of any thunder coming for this period
	// Example: 54.32
	ProbabilityOfThunder float64 `json:"probability_of_thunder,omitempty"`

	// Maximum ultraviolet index if sky is clear
	// Example: 1
	UltravioletIndexClearSkyMax float64 `json:"ultraviolet_index_clear_sky_max,omitempty"`
}

// Validate validates this forecast time period
func (m *ForecastTimePeriod) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this forecast time period based on context it is used
func (m *ForecastTimePeriod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ForecastTimePeriod) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForecastTimePeriod) UnmarshalBinary(b []byte) error {
	var res ForecastTimePeriod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
