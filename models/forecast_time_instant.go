// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ForecastTimeInstant Weather parameters valid for a specific point in time.
//
// swagger:model ForecastTimeInstant
type ForecastTimeInstant struct {

	// Air pressure at sea level
	// Example: 1017.23
	AirPressureAtSeaLevel float64 `json:"air_pressure_at_sea_level,omitempty"`

	// Air temperature
	// Example: 17.1
	AirTemperature float64 `json:"air_temperature,omitempty"`

	// Amount of sky covered by clouds.
	// Example: 95.2
	CloudAreaFraction float64 `json:"cloud_area_fraction,omitempty"`

	// Amount of sky covered by clouds at high elevation.
	// Example: 95.2
	CloudAreaFractionHigh float64 `json:"cloud_area_fraction_high,omitempty"`

	// Amount of sky covered by clouds at low elevation.
	// Example: 95.2
	CloudAreaFractionLow float64 `json:"cloud_area_fraction_low,omitempty"`

	// Amount of sky covered by clouds at medium elevation.
	// Example: 95.2
	CloudAreaFractionMedium float64 `json:"cloud_area_fraction_medium,omitempty"`

	// Dew point temperature at sea level
	// Example: 8.1
	DewPointTemperature float64 `json:"dew_point_temperature,omitempty"`

	// Amount of area covered by fog.
	// Example: 95.2
	FogAreaFraction float64 `json:"fog_area_fraction,omitempty"`

	// Amount of humidity in the air.
	// Example: 81.1
	RelativeHumidity float64 `json:"relative_humidity,omitempty"`

	// The directon which moves towards
	// Example: 121.3
	WindFromDirection float64 `json:"wind_from_direction,omitempty"`

	// Speed of wind
	// Example: 5.9
	WindSpeed float64 `json:"wind_speed,omitempty"`

	// Speed of wind gust
	// Example: 15.9
	WindSpeedOfGust float64 `json:"wind_speed_of_gust,omitempty"`
}

// Validate validates this forecast time instant
func (m *ForecastTimeInstant) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this forecast time instant based on context it is used
func (m *ForecastTimeInstant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ForecastTimeInstant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForecastTimeInstant) UnmarshalBinary(b []byte) error {
	var res ForecastTimeInstant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
