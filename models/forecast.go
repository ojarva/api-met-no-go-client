// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Forecast Forecast timeseries
//
// swagger:model Forecast
type Forecast struct {

	// meta
	// Required: true
	Meta *ForecastMeta `json:"meta"`

	// timeseries
	// Required: true
	Timeseries []*ForecastTimeStep `json:"timeseries"`
}

// Validate validates this forecast
func (m *Forecast) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeseries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Forecast) validateMeta(formats strfmt.Registry) error {

	if err := validate.Required("meta", "body", m.Meta); err != nil {
		return err
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

func (m *Forecast) validateTimeseries(formats strfmt.Registry) error {

	if err := validate.Required("timeseries", "body", m.Timeseries); err != nil {
		return err
	}

	for i := 0; i < len(m.Timeseries); i++ {
		if swag.IsZero(m.Timeseries[i]) { // not required
			continue
		}

		if m.Timeseries[i] != nil {
			if err := m.Timeseries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeseries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this forecast based on the context it is used
func (m *Forecast) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeseries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Forecast) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {
		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

func (m *Forecast) contextValidateTimeseries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Timeseries); i++ {

		if m.Timeseries[i] != nil {
			if err := m.Timeseries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeseries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Forecast) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Forecast) UnmarshalBinary(b []byte) error {
	var res Forecast
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ForecastMeta forecast meta
//
// swagger:model ForecastMeta
type ForecastMeta struct {

	// units
	// Required: true
	Units *ForecastUnits `json:"units"`

	// Update time for this forecast
	// Example: 2019-12-03T13:52:13Z
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this forecast meta
func (m *ForecastMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForecastMeta) validateUnits(formats strfmt.Registry) error {

	if err := validate.Required("meta"+"."+"units", "body", m.Units); err != nil {
		return err
	}

	if m.Units != nil {
		if err := m.Units.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta" + "." + "units")
			}
			return err
		}
	}

	return nil
}

func (m *ForecastMeta) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("meta"+"."+"updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this forecast meta based on the context it is used
func (m *ForecastMeta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUnits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForecastMeta) contextValidateUnits(ctx context.Context, formats strfmt.Registry) error {

	if m.Units != nil {
		if err := m.Units.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta" + "." + "units")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ForecastMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForecastMeta) UnmarshalBinary(b []byte) error {
	var res ForecastMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
