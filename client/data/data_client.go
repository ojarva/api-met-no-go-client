// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new data API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for data API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetClassic(params *GetClassicParams, opts ...ClientOption) (*GetClassicOK, error)

	GetClassicFormat(params *GetClassicFormatParams, opts ...ClientOption) (*GetClassicFormatOK, error)

	GetCompact(params *GetCompactParams, opts ...ClientOption) (*GetCompactOK, error)

	GetCompactFormat(params *GetCompactFormatParams, opts ...ClientOption) (*GetCompactFormatOK, error)

	GetComplete(params *GetCompleteParams, opts ...ClientOption) (*GetCompleteOK, error)

	GetCompleteFormat(params *GetCompleteFormatParams, opts ...ClientOption) (*GetCompleteFormatOK, error)

	GetStatus(params *GetStatusParams, opts ...ClientOption) (*GetStatusOK, error)

	GetStatusFormat(params *GetStatusFormatParams, opts ...ClientOption) (*GetStatusFormatOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetClassic Weather forecast for a specified place
*/
func (a *Client) GetClassic(params *GetClassicParams, opts ...ClientOption) (*GetClassicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClassicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClassic",
		Method:             "GET",
		PathPattern:        "/classic",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClassicReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClassicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClassic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClassicFormat Weather forecast for a specified place
*/
func (a *Client) GetClassicFormat(params *GetClassicFormatParams, opts ...ClientOption) (*GetClassicFormatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClassicFormatParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClassicFormat",
		Method:             "GET",
		PathPattern:        "/classic.{format}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClassicFormatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClassicFormatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClassicFormat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCompact Weather forecast for a specified place
*/
func (a *Client) GetCompact(params *GetCompactParams, opts ...ClientOption) (*GetCompactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCompact",
		Method:             "GET",
		PathPattern:        "/compact",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCompactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCompact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCompactFormat Weather forecast for a specified place
*/
func (a *Client) GetCompactFormat(params *GetCompactFormatParams, opts ...ClientOption) (*GetCompactFormatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompactFormatParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCompactFormat",
		Method:             "GET",
		PathPattern:        "/compact.{format}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompactFormatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCompactFormatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCompactFormat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetComplete Weather forecast for a specified place
*/
func (a *Client) GetComplete(params *GetCompleteParams, opts ...ClientOption) (*GetCompleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplete",
		Method:             "GET",
		PathPattern:        "/complete",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCompleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCompleteFormat Weather forecast for a specified place
*/
func (a *Client) GetCompleteFormat(params *GetCompleteFormatParams, opts ...ClientOption) (*GetCompleteFormatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompleteFormatParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCompleteFormat",
		Method:             "GET",
		PathPattern:        "/complete.{format}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompleteFormatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCompleteFormatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCompleteFormat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStatus Weather forecast for a specified place
*/
func (a *Client) GetStatus(params *GetStatusParams, opts ...ClientOption) (*GetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStatus",
		Method:             "GET",
		PathPattern:        "/status",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStatusFormat Weather forecast for a specified place
*/
func (a *Client) GetStatusFormat(params *GetStatusFormatParams, opts ...ClientOption) (*GetStatusFormatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatusFormatParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStatusFormat",
		Method:             "GET",
		PathPattern:        "/status.{format}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStatusFormatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStatusFormatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStatusFormat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
